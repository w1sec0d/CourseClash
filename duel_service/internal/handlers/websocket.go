package handlers

import (
	"log"
	"net/http"
	"strconv"
	"time"

	"courseclash/duel-service/internal/duelsync"
	"courseclash/duel-service/internal/models"
	"courseclash/duel-service/internal/repositories"
	"courseclash/duel-service/internal/services"

	"github.com/gorilla/websocket"
)

// WsHandler gestiona la conexi√≥n WebSocket de un jugador para un duelo.
// Se encarga de la l√≥gica de conexi√≥n y sincronizaci√≥n entre los dos jugadores de un duelo.
func WsHandler(w http.ResponseWriter, r *http.Request, duelID string, playerID string) {
	// Convertir duelID a entero para buscar en la base de datos
	duelIDInt, err := strconv.Atoi(duelID)
	if err != nil {
		log.Printf("ID de duelo inv√°lido: %s", duelID)
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("ID de duelo inv√°lido"))
		return
	}
	
	// Verificar que el duelo existe en la base de datos
	duelRepo := repositories.NewDuelRepository()
	duel, err := duelRepo.GetDuelByID(duelIDInt)
	if err != nil {
		log.Printf("Duelo %s no encontrado: %v", duelID, err)
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("Duelo no encontrado"))
		return
	}
	
	// Verificar si el jugador es parte del duelo
	validPlayer := false
	requesterID := duel.ChallengerID
	opponentID := duel.OpponentID
	
	if playerID == requesterID || playerID == opponentID {
		validPlayer = true
	}
	
	// Si el jugador no es parte del duelo, rechazar la conexi√≥n
	if !validPlayer {
		log.Printf("Jugador %s intent√≥ conectarse al duelo %s pero no es parte de √©l", playerID, duelID)
		w.WriteHeader(http.StatusUnauthorized)
		w.Write([]byte("No est√°s autorizado para conectarte a este duelo"))
		return
	}
	// Eleva o actualiza el estado de la conexi√≥n HTTP del jugador a WebSocket
	conn, err := duelsync.Upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("Error al actualizar a WebSocket para el jugador %s en el duelo %s: %v", playerID, duelID, err)
		return
	}
	// Termina la conexi√≥n cuando todo se ha ejecutado
	defer conn.Close()

	// Crear una instancia del repositorio de jugadores para obtener el elo y el rango
	playerRepo := repositories.NewPlayerRepository()
	
	// Obtener los datos del jugador desde MongoDB
	playerData, err := playerRepo.GetPlayerByID(playerID)
	if err != nil {
		log.Printf("Error al obtener datos del jugador %s desde MongoDB: %v", playerID, err)
		conn.WriteMessage(websocket.TextMessage, []byte("Error al obtener datos del jugador. Cerrando conexi√≥n."))
		return
	}
	
	// Usar el ELO obtenido de MongoDB
	playerElo := playerData.Elo

	// Crear el canal Done para este jugador. Este canal permite reconocder cuando un jugador termino
	playerDoneChan := make(chan struct{})
	player := &models.Player{
		ID:    playerID,
		Score: 0,
		Elo:   playerElo,
		Conn:  conn,
		Done:  playerDoneChan,
	}

	// Usar el rango obtenido de MongoDB
	player.Rank = playerData.Rank

	duelsync.Mu.Lock()

	// Verifica si hay un mapa de las conexiones de los jugadores para un duelo determinado
	// Si no hay lo crea y lo asigna a playersConnected
	playersConnected, playersConnectedExists := duelsync.DuelConnections[duelID]
	if !playersConnectedExists {
		playersConnected = &models.DuelConnection{}
		duelsync.DuelConnections[duelID] = playersConnected
	}

	// Revisa si existe un canal para sincronizar el duelo, si no lo hay lo crea
	syncChannel, syncChannelExists := duelsync.DuelSyncChans[duelID]
	if !syncChannelExists {
		syncChannel = make(chan struct{})
		duelsync.DuelSyncChans[duelID] = syncChannel
	}

	// Determinar si es el retador o el aceptador bas√°ndose en los datos del duelo
	isRequester := playerID == requesterID
	isOpponent := playerID == opponentID
	
	// Verificar que el duelo existe antes de asignar jugadores
	duelRequestExists := false
	_, duelRequestExists = duelsync.DuelRequests[duelID]

	log.Printf("üîó [CONEXION] Jugador %s conect√°ndose al duelo %s. Es retador: %t, Es oponente: %t, Duelo existe: %t", 
		playerID, duelID, isRequester, isOpponent, duelRequestExists)
	log.Printf("üîó [ESTADO] Player1 existe: %t, Player2 existe: %t", 
		playersConnected.Player1 != nil, playersConnected.Player2 != nil)

	isPlayer1 := false

	// CASO 1: Es el RETADOR (quien solicita el duelo)
	if isRequester {
		// El retador se conecta despu√©s de solicitar el duelo
		// Debe ser asignado como Player1 y esperar la aceptaci√≥n
		playersConnected.Player1 = player
		isPlayer1 = true
		duelsync.Mu.Unlock()
		
		if !duelRequestExists {
			conn.WriteMessage(websocket.TextMessage, []byte("El duelo no existe o ya expir√≥."))
			return
		}

		log.Printf("Retador %s esperando aceptaci√≥n del duelo %s", playerID, duelID)
		
		// Esperar la aceptaci√≥n del duelo
		duelsync.Mu.Lock()
		acceptChan, exists := duelsync.DuelRequests[duelID]
		duelsync.Mu.Unlock()
		
		if !exists {
			conn.WriteMessage(websocket.TextMessage, []byte("El duelo no existe o ya expir√≥."))
			return
		}
		
		select {
		case accepted := <-acceptChan:
			if !accepted {
				conn.WriteMessage(websocket.TextMessage, []byte("El duelo fue rechazado."))
				return
			}
			// El duelo fue aceptado, eliminamos el canal para evitar doble lectura
			duelsync.Mu.Lock()
			delete(duelsync.DuelRequests, duelID)
			duelsync.Mu.Unlock()
		case <-time.After(30 * time.Second):
			conn.WriteMessage(websocket.TextMessage, []byte("El duelo no fue aceptado a tiempo. Cerrando conexi√≥n."))
			// Limpiar estado
			duelsync.Mu.Lock()
			delete(duelsync.DuelRequests, duelID)
			delete(duelsync.DuelConnections, duelID)
			delete(duelsync.DuelSyncChans, duelID)
			duelsync.Mu.Unlock()
			return
		}
		
		// Duelo aceptado, esperando al oponente
		conn.WriteMessage(websocket.TextMessage, []byte("Duelo aceptado. Esperando al oponente..."))
		log.Printf("Retador %s: duelo %s aceptado. Esperando al oponente...", playerID, duelID)
		
		// Esperar a que el oponente se conecte
		<-syncChannel
		
		log.Printf("Retador %s: oponente conectado para el duelo %s", playerID, duelID)
		if err := player.SafeWriteMessage(websocket.TextMessage, []byte("¬°Oponente conectado! El duelo comenzar√° pronto.")); err != nil {
			log.Printf("Error al enviar mensaje 'Oponente conectado' al retador %s: %v", playerID, err)
		}

	// CASO 2: Es el OPONENTE (quien acepta el duelo)  
	} else if isOpponent {
		// El oponente se conecta despu√©s de aceptar el duelo
		// El duelo ya debe haber sido aceptado, as√≠ que no debe existir en DuelRequests
		
		if duelRequestExists {
			duelsync.Mu.Unlock()
			conn.WriteMessage(websocket.TextMessage, []byte("El duelo a√∫n no ha sido aceptado. Acepta primero el duelo."))
			return
		}
		
		// Verificar que el retador ya est√© conectado
		if playersConnected.Player1 == nil {
			duelsync.Mu.Unlock()
			log.Printf("‚ùå [ERROR] Oponente %s intent√≥ conectar pero retador no est√° conectado para duelo %s", playerID, duelID)
			conn.WriteMessage(websocket.TextMessage, []byte("El retador a√∫n no se ha conectado. Espera un momento."))
			return
		}
		
		log.Printf("‚úÖ [OK] Oponente %s conectando - retador %s ya est√° conectado", playerID, playersConnected.Player1.ID)
		
		// Asignar como Player2
		playersConnected.Player2 = player
		p1ToUse := playersConnected.Player1
		p2ToUse := playersConnected.Player2
		
		// Verificar que las asignaciones sean correctas antes de liberar el mutex
		log.Printf("üîç [DEBUG] Antes de StartDuel - P1: %s (conn: %v), P2: %s (conn: %v)", 
			p1ToUse.ID, p1ToUse.Conn != nil, p2ToUse.ID, p2ToUse.Conn != nil)
		
		duelsync.Mu.Unlock()
		
		log.Printf("Oponente %s conectado al duelo %s. Notificando al retador %s e iniciando duelo.", 
			playerID, duelID, p1ToUse.ID)
		
		if err := player.SafeWriteMessage(websocket.TextMessage, []byte("¬°Duelo listo!")); err != nil {
			log.Printf("Error al enviar mensaje 'Duelo listo' al oponente %s: %v", playerID, err)
		} else {
			log.Printf("‚úÖ Mensaje '¬°Duelo listo!' enviado exitosamente al oponente %s", playerID)
		}
		
		// Notificar al retador que el oponente se conect√≥
		syncChannel <- struct{}{}
		
		// Aumentar delay para asegurar que ambos jugadores procesen los mensajes y configuren sus listeners
		log.Printf("‚è≥ Esperando 2 segundos antes de iniciar el duelo para sincronizaci√≥n...")
		time.Sleep(2 * time.Second)
		
		// Iniciar el duelo
		log.Printf("Iniciando duelo %s: Retador %s vs Oponente %s", duelID, p1ToUse.ID, p2ToUse.ID)
		
		// Obtener preguntas aleatorias de la base de datos para el duelo
		questionService := services.NewQuestionService()
		log.Printf("üîç [DEBUG] Intentando obtener preguntas de la base de datos para el duelo %s", duelID)
		
		// Por defecto usar "matematica" como categor√≠a, luego se implementar√° que venga del request
		category := "matematica"
		if duel.Category != "" {
			category = duel.Category
		}
		
		log.Printf("üîç [DEBUG] Obteniendo preguntas para la categor√≠a: %s", category)
		questions, err := questionService.GetQuestionsForDuel(category)
		if err != nil {
			log.Printf("‚ùå [ERROR] Error al obtener preguntas para el duelo %s: %v. Usando preguntas de respaldo.", duelID, err)
			
			// Preguntas de respaldo espec√≠ficas por categor√≠a
			switch category {
			case "matematica":
				questions = []models.Question{
					{ID: "backup_math1", Text: "¬øCu√°nto es 2+2?", Answer: "4", Options: []string{"3", "4", "5", "6"}, Duration: 30, Category: "matematica"},
					{ID: "backup_math2", Text: "¬øCu√°l es la ra√≠z cuadrada de 16?", Answer: "4", Options: []string{"2", "4", "6", "8"}, Duration: 30, Category: "matematica"},
					{ID: "backup_math3", Text: "¬øCu√°nto es 5 √ó 7?", Answer: "35", Options: []string{"30", "35", "40", "45"}, Duration: 30, Category: "matematica"},
					{ID: "backup_math4", Text: "¬øCu√°nto es 10 √∑ 2?", Answer: "5", Options: []string{"4", "5", "6", "7"}, Duration: 30, Category: "matematica"},
					{ID: "backup_math5", Text: "¬øCu√°l es el valor de œÄ (pi) aproximadamente?", Answer: "3.14", Options: []string{"3.12", "3.14", "3.16", "3.18"}, Duration: 30, Category: "matematica"},
					{ID: "backup_math6", Text: "¬øCu√°nto es 15% de 100?", Answer: "15", Options: []string{"10", "15", "20", "25"}, Duration: 30, Category: "matematica"},
					{ID: "backup_math7", Text: "¬øCu√°l es la f√≥rmula del √°rea de un tri√°ngulo?", Answer: "base √ó altura √∑ 2", Options: []string{"base √ó altura", "base √ó altura √∑ 2", "base + altura", "base √∑ altura"}, Duration: 30, Category: "matematica"},
					{ID: "backup_math8", Text: "¬øCu√°nto es 8¬≤?", Answer: "64", Options: []string{"56", "64", "72", "80"}, Duration: 30, Category: "matematica"},
				}
			case "historia":
				questions = []models.Question{
					{ID: "backup_hist1", Text: "¬øEn qu√© a√±o comenz√≥ la Segunda Guerra Mundial?", Answer: "1939", Options: []string{"1914", "1939", "1945", "1918"}, Duration: 30, Category: "historia"},
					{ID: "backup_hist2", Text: "¬øQui√©n fue el primer presidente de Estados Unidos?", Answer: "George Washington", Options: []string{"Thomas Jefferson", "George Washington", "John Adams", "Benjamin Franklin"}, Duration: 30, Category: "historia"},
					{ID: "backup_hist3", Text: "¬øEn qu√© a√±o cay√≥ el Muro de Berl√≠n?", Answer: "1989", Options: []string{"1987", "1989", "1991", "1993"}, Duration: 30, Category: "historia"},
					{ID: "backup_hist4", Text: "¬øEn qu√© a√±o lleg√≥ Crist√≥bal Col√≥n a Am√©rica?", Answer: "1492", Options: []string{"1490", "1492", "1494", "1496"}, Duration: 30, Category: "historia"},
					{ID: "backup_hist5", Text: "¬øQui√©n fue el emperador romano que legaliz√≥ el cristianismo?", Answer: "Constantino", Options: []string{"Ner√≥n", "Constantino", "Augusto", "Trajano"}, Duration: 30, Category: "historia"},
					{ID: "backup_hist6", Text: "¬øEn qu√© a√±o termin√≥ la Primera Guerra Mundial?", Answer: "1918", Options: []string{"1917", "1918", "1919", "1920"}, Duration: 30, Category: "historia"},
					{ID: "backup_hist7", Text: "¬øCu√°l fue la primera civilizaci√≥n en desarrollar la escritura?", Answer: "Sumerios", Options: []string{"Egipcios", "Sumerios", "Griegos", "Romanos"}, Duration: 30, Category: "historia"},
					{ID: "backup_hist8", Text: "¬øEn qu√© siglo ocurri√≥ la Revoluci√≥n Francesa?", Answer: "XVIII", Options: []string{"XVII", "XVIII", "XIX", "XVI"}, Duration: 30, Category: "historia"},
				}
			case "geografia":
				questions = []models.Question{
					{ID: "backup_geo1", Text: "¬øCu√°l es el r√≠o m√°s largo del mundo?", Answer: "Nilo", Options: []string{"Amazonas", "Nilo", "Mississippi", "Yangts√©"}, Duration: 30, Category: "geografia"},
					{ID: "backup_geo2", Text: "¬øCu√°l es la capital de Australia?", Answer: "Canberra", Options: []string{"Sydney", "Melbourne", "Canberra", "Perth"}, Duration: 30, Category: "geografia"},
					{ID: "backup_geo3", Text: "¬øEn qu√© continente est√° ubicado Egipto?", Answer: "√Åfrica", Options: []string{"Asia", "√Åfrica", "Europa", "Am√©rica"}, Duration: 30, Category: "geografia"},
					{ID: "backup_geo4", Text: "¬øCu√°l es la capital de Francia?", Answer: "Par√≠s", Options: []string{"Londres", "Madrid", "Par√≠s", "Roma"}, Duration: 30, Category: "geografia"},
					{ID: "backup_geo5", Text: "¬øCu√°l es el pa√≠s m√°s grande del mundo por superficie?", Answer: "Rusia", Options: []string{"China", "Canad√°", "Estados Unidos", "Rusia"}, Duration: 30, Category: "geografia"},
					{ID: "backup_geo6", Text: "¬øCu√°l es la monta√±a m√°s alta del mundo?", Answer: "Monte Everest", Options: []string{"K2", "Monte Everest", "Kilimanjaro", "Mont Blanc"}, Duration: 30, Category: "geografia"},
					{ID: "backup_geo7", Text: "¬øCu√°l es el oc√©ano m√°s grande del mundo?", Answer: "Pac√≠fico", Options: []string{"Atl√°ntico", "√çndico", "Pac√≠fico", "√Årtico"}, Duration: 30, Category: "geografia"},
					{ID: "backup_geo8", Text: "¬øEn qu√© pa√≠s se encuentra Machu Picchu?", Answer: "Per√∫", Options: []string{"Bolivia", "Per√∫", "Ecuador", "Colombia"}, Duration: 30, Category: "geografia"},
				}
			case "ciencias":
				questions = []models.Question{
					{ID: "backup_sci1", Text: "¬øCu√°l es el planeta m√°s grande del sistema solar?", Answer: "J√∫piter", Options: []string{"Tierra", "J√∫piter", "Saturno", "Marte"}, Duration: 30, Category: "ciencias"},
					{ID: "backup_sci2", Text: "¬øCu√°l es el s√≠mbolo qu√≠mico del oro?", Answer: "Au", Options: []string{"Go", "Au", "Ag", "Al"}, Duration: 30, Category: "ciencias"},
					{ID: "backup_sci3", Text: "¬øCu√°ntos huesos tiene un adulto humano?", Answer: "206", Options: []string{"206", "208", "210", "212"}, Duration: 30, Category: "ciencias"},
					{ID: "backup_sci4", Text: "¬øCu√°l es el s√≠mbolo qu√≠mico del agua?", Answer: "H2O", Options: []string{"HO", "H2O", "H3O", "OH"}, Duration: 30, Category: "ciencias"},
					{ID: "backup_sci5", Text: "¬øCu√°ntos planetas hay en nuestro sistema solar?", Answer: "8", Options: []string{"7", "8", "9", "10"}, Duration: 30, Category: "ciencias"},
					{ID: "backup_sci6", Text: "¬øQu√© gas es esencial para la respiraci√≥n humana?", Answer: "Ox√≠geno", Options: []string{"Di√≥xido de carbono", "Ox√≠geno", "Nitr√≥geno", "Hidr√≥geno"}, Duration: 30, Category: "ciencias"},
					{ID: "backup_sci7", Text: "¬øQu√© planeta es conocido como el planeta rojo?", Answer: "Marte", Options: []string{"Venus", "Marte", "J√∫piter", "Saturno"}, Duration: 30, Category: "ciencias"},
					{ID: "backup_sci8", Text: "¬øCu√°l es la velocidad de la luz en el vac√≠o?", Answer: "300,000 km/s", Options: []string{"300,000 km/s", "150,000 km/s", "450,000 km/s", "600,000 km/s"}, Duration: 30, Category: "ciencias"},
				}
			case "literatura":
				questions = []models.Question{
					{ID: "backup_lit1", Text: "¬øQui√©n escribi√≥ 'Don Quijote de la Mancha'?", Answer: "Miguel de Cervantes", Options: []string{"Federico Garc√≠a Lorca", "Miguel de Cervantes", "Francisco de Quevedo", "Lope de Vega"}, Duration: 30, Category: "literatura"},
					{ID: "backup_lit2", Text: "¬øQui√©n escribi√≥ 'Cien a√±os de soledad'?", Answer: "Gabriel Garc√≠a M√°rquez", Options: []string{"Mario Vargas Llosa", "Gabriel Garc√≠a M√°rquez", "Jorge Luis Borges", "Octavio Paz"}, Duration: 30, Category: "literatura"},
					{ID: "backup_lit3", Text: "¬øEn qu√© siglo vivi√≥ William Shakespeare?", Answer: "XVI-XVII", Options: []string{"XV-XVI", "XVI-XVII", "XVII-XVIII", "XVIII-XIX"}, Duration: 30, Category: "literatura"},
					{ID: "backup_lit4", Text: "¬øQui√©n escribi√≥ 'Romeo y Julieta'?", Answer: "William Shakespeare", Options: []string{"Charles Dickens", "William Shakespeare", "Jane Austen", "Mark Twain"}, Duration: 30, Category: "literatura"},
					{ID: "backup_lit5", Text: "¬øCu√°l es la primera obra de la literatura espa√±ola?", Answer: "El Cantar de Mio Cid", Options: []string{"El Cantar de Mio Cid", "La Celestina", "El Lazarillo de Tormes", "El Libro de Buen Amor"}, Duration: 30, Category: "literatura"},
					{ID: "backup_lit6", Text: "¬øQui√©n escribi√≥ '1984'?", Answer: "George Orwell", Options: []string{"Aldous Huxley", "George Orwell", "Ray Bradbury", "Philip K. Dick"}, Duration: 30, Category: "literatura"},
					{ID: "backup_lit7", Text: "¬øCu√°l es el primer libro de Harry Potter?", Answer: "La Piedra Filosofal", Options: []string{"La C√°mara Secreta", "El Prisionero de Azkaban", "La Piedra Filosofal", "El C√°liz de Fuego"}, Duration: 30, Category: "literatura"},
					{ID: "backup_lit8", Text: "¬øEn qu√© obra aparece el personaje de Sherlock Holmes?", Answer: "Obras de Arthur Conan Doyle", Options: []string{"Obras de Agatha Christie", "Obras de Arthur Conan Doyle", "Obras de Edgar Allan Poe", "Obras de Raymond Chandler"}, Duration: 30, Category: "literatura"},
				}
			case "fisica":
				questions = []models.Question{
					{ID: "backup_fis1", Text: "¬øCu√°l es la unidad de medida de la fuerza en el Sistema Internacional?", Answer: "Newton", Options: []string{"Joule", "Newton", "Pascal", "Watt"}, Duration: 30, Category: "fisica"},
					{ID: "backup_fis2", Text: "¬øQui√©n formul√≥ la ley de la gravedad universal?", Answer: "Newton", Options: []string{"Einstein", "Galileo", "Newton", "Kepler"}, Duration: 30, Category: "fisica"},
					{ID: "backup_fis3", Text: "¬øCu√°l es la velocidad de ca√≠da libre en la Tierra?", Answer: "9.8 m/s¬≤", Options: []string{"9.8 m/s¬≤", "10 m/s¬≤", "9 m/s¬≤", "8.9 m/s¬≤"}, Duration: 30, Category: "fisica"},
					{ID: "backup_fis4", Text: "¬øQu√© part√≠cula subat√≥mica tiene carga negativa?", Answer: "Electr√≥n", Options: []string{"Prot√≥n", "Neutr√≥n", "Electr√≥n", "Positr√≥n"}, Duration: 30, Category: "fisica"},
					{ID: "backup_fis5", Text: "¬øCu√°l es la primera ley de Newton?", Answer: "Ley de la inercia", Options: []string{"Ley de la gravedad", "Ley de la inercia", "Ley de acci√≥n y reacci√≥n", "Ley de la fuerza"}, Duration: 30, Category: "fisica"},
					{ID: "backup_fis6", Text: "¬øQu√© es la energ√≠a cin√©tica?", Answer: "Energ√≠a de movimiento", Options: []string{"Energ√≠a de posici√≥n", "Energ√≠a de movimiento", "Energ√≠a t√©rmica", "Energ√≠a qu√≠mica"}, Duration: 30, Category: "fisica"},
					{ID: "backup_fis7", Text: "¬øCu√°l es la unidad de medida de la energ√≠a?", Answer: "Joule", Options: []string{"Newton", "Watt", "Joule", "Pascal"}, Duration: 30, Category: "fisica"},
					{ID: "backup_fis8", Text: "¬øQu√© tipo de ondas son las ondas de sonido?", Answer: "Ondas mec√°nicas", Options: []string{"Ondas electromagn√©ticas", "Ondas mec√°nicas", "Ondas gravitacionales", "Ondas cu√°nticas"}, Duration: 30, Category: "fisica"},
				}
			case "quimica":
				questions = []models.Question{
					{ID: "backup_qui1", Text: "¬øCu√°l es el s√≠mbolo qu√≠mico del hierro?", Answer: "Fe", Options: []string{"Hi", "Fe", "Ir", "He"}, Duration: 30, Category: "quimica"},
					{ID: "backup_qui2", Text: "¬øCu√°ntos elementos hay en la tabla peri√≥dica actual?", Answer: "118", Options: []string{"116", "117", "118", "119"}, Duration: 30, Category: "quimica"},
					{ID: "backup_qui3", Text: "¬øCu√°l es el pH del agua pura?", Answer: "7", Options: []string{"6", "7", "8", "9"}, Duration: 30, Category: "quimica"},
					{ID: "backup_qui4", Text: "¬øCu√°l es la f√≥rmula qu√≠mica del di√≥xido de carbono?", Answer: "CO2", Options: []string{"CO", "CO2", "C2O", "CO3"}, Duration: 30, Category: "quimica"},
					{ID: "backup_qui5", Text: "¬øQu√© gas constituye aproximadamente el 78% de la atm√≥sfera terrestre?", Answer: "Nitr√≥geno", Options: []string{"Ox√≠geno", "Di√≥xido de carbono", "Nitr√≥geno", "Arg√≥n"}, Duration: 30, Category: "quimica"},
					{ID: "backup_qui6", Text: "¬øCu√°l es la f√≥rmula qu√≠mica de la sal com√∫n?", Answer: "NaCl", Options: []string{"NaCl", "KCl", "CaCl2", "MgCl2"}, Duration: 30, Category: "quimica"},
					{ID: "backup_qui7", Text: "¬øQu√© elemento qu√≠mico tiene el n√∫mero at√≥mico 1?", Answer: "Hidr√≥geno", Options: []string{"Helio", "Hidr√≥geno", "Litio", "Carbono"}, Duration: 30, Category: "quimica"},
					{ID: "backup_qui8", Text: "¬øCu√°l es el elemento qu√≠mico m√°s abundante en el universo?", Answer: "Hidr√≥geno", Options: []string{"Ox√≠geno", "Carbono", "Hidr√≥geno", "Helio"}, Duration: 30, Category: "quimica"},
				}
			case "biologia":
				questions = []models.Question{
					{ID: "backup_bio1", Text: "¬øCu√°l es la unidad b√°sica de la vida?", Answer: "C√©lula", Options: []string{"√Åtomo", "Mol√©cula", "C√©lula", "Tejido"}, Duration: 30, Category: "biologia"},
					{ID: "backup_bio2", Text: "¬øQu√© proceso permite a las plantas producir su propio alimento?", Answer: "Fotos√≠ntesis", Options: []string{"Respiraci√≥n", "Fotos√≠ntesis", "Digesti√≥n", "Fermentaci√≥n"}, Duration: 30, Category: "biologia"},
					{ID: "backup_bio3", Text: "¬øCu√°ntos cromosomas tiene una c√©lula humana normal?", Answer: "46", Options: []string{"44", "45", "46", "47"}, Duration: 30, Category: "biologia"},
					{ID: "backup_bio4", Text: "¬øCu√°l es el √≥rgano m√°s grande del cuerpo humano?", Answer: "Piel", Options: []string{"H√≠gado", "Pulmones", "Cerebro", "Piel"}, Duration: 30, Category: "biologia"},
					{ID: "backup_bio5", Text: "¬øQu√© tipo de sangre es considerado donante universal?", Answer: "O-", Options: []string{"A+", "B+", "AB+", "O-"}, Duration: 30, Category: "biologia"},
					{ID: "backup_bio6", Text: "¬øCu√°ntas c√°maras tiene el coraz√≥n humano?", Answer: "4", Options: []string{"2", "3", "4", "5"}, Duration: 30, Category: "biologia"},
					{ID: "backup_bio7", Text: "¬øQu√© mol√©cula contiene la informaci√≥n gen√©tica en las c√©lulas?", Answer: "ADN", Options: []string{"ARN", "ADN", "Prote√≠na", "L√≠pido"}, Duration: 30, Category: "biologia"},
					{ID: "backup_bio8", Text: "¬øQu√© √≥rgano del cuerpo humano produce la insulina?", Answer: "P√°ncreas", Options: []string{"H√≠gado", "P√°ncreas", "Ri√±√≥n", "Coraz√≥n"}, Duration: 30, Category: "biologia"},
				}
			default:
				// Preguntas generales si la categor√≠a no coincide
				questions = []models.Question{
					{ID: "backup_gen1", Text: "¬øQui√©n pint√≥ la Mona Lisa?", Answer: "Leonardo da Vinci", Options: []string{"Pablo Picasso", "Vincent van Gogh", "Leonardo da Vinci", "Miguel √Ångel"}, Duration: 30, Category: "general"},
					{ID: "backup_gen2", Text: "¬øCu√°l es el oc√©ano m√°s grande?", Answer: "Pac√≠fico", Options: []string{"Atl√°ntico", "Pac√≠fico", "√çndico", "√Årtico"}, Duration: 30, Category: "general"},
					{ID: "backup_gen3", Text: "¬øCu√°ntos continentes hay?", Answer: "7", Options: []string{"5", "6", "7", "8"}, Duration: 30, Category: "general"},
				}
			}
			log.Printf("‚ö†Ô∏è [RESPALDO] Se usaron %d preguntas hardcodeadas de categor√≠a '%s' como respaldo", len(questions), category)
		} else {
			log.Printf("‚úÖ [BD √âXITO] Se obtuvieron %d preguntas de la base de datos para categor√≠a '%s'", len(questions), category)
		}
		
		log.Printf("üìã [PREGUNTAS FINALES] Total de preguntas preparadas para el duelo %s: %d", duelID, len(questions))
		for i, q := range questions {
			log.Printf("üìã [PREGUNTA %d/%d] ID: %s, Texto: %s", i+1, len(questions), q.ID, q.Text)
		}

		log.Printf("Duelo %s: Obtenidas %d preguntas para el duelo", duelID, len(questions))
		
		// Verificar nuevamente que ambos jugadores tengan conexiones v√°lidas antes de StartDuel
		if p1ToUse.Conn == nil {
			log.Printf("‚ùå [ERROR CR√çTICO] P1 (%s) no tiene conexi√≥n v√°lida antes de StartDuel", p1ToUse.ID)
			return
		}
		if p2ToUse.Conn == nil {
			log.Printf("‚ùå [ERROR CR√çTICO] P2 (%s) no tiene conexi√≥n v√°lida antes de StartDuel", p2ToUse.ID)
			return
		}
		
		log.Printf("üöÄ [INICIANDO] StartDuel con P1: %s, P2: %s, DuelID: %s", p1ToUse.ID, p2ToUse.ID, duelID)
		duelsync.StartDuel(p1ToUse, p2ToUse, duelID, questions, HandleDuel)
		
	// CASO 3: Jugador no autorizado 
	} else {
		duelsync.Mu.Unlock()
		log.Printf("Duelo %s: jugador %s no autorizado.", duelID, playerID)
		conn.WriteMessage(websocket.TextMessage, []byte("No puedes unirte a este duelo."))
		return
	}

	// Ambos jugadores (P1 despu√©s de ser notificado, P2 despu√©s de iniciar el duelo y notificar)
	// esperan aqu√≠ hasta que su participaci√≥n en el duelo termine (HandleDuel cierra player.Done).
	playerRole := "P2"
	if isPlayer1 {
		playerRole = "P1"
	}
	log.Printf("Jugador %s (ID: %s) esperando finalizaci√≥n del duelo %s.", player.ID, playerRole, duelID)
	<-player.Done
	log.Printf("Jugador %s (ID: %s) finaliz√≥ participaci√≥n en duelo %s. Cerrando conexi√≥n.", player.ID, playerRole, duelID)
	// defer conn.Close() se ejecutar√° al salir de WsHandler.
}
