{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/juan/C%C3%B3digo/CourseClash/CourseClash/frontend/components/NavigationBar.tsx"],"sourcesContent":["'use client';\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { useState } from 'react';\nimport clsx from 'clsx';\nimport {\n  HomeIcon,\n  SparklesIcon,\n  TrophyIcon,\n  CurrencyDollarIcon,\n  ArrowRightOnRectangleIcon,\n  UserPlusIcon,\n} from '@heroicons/react/24/outline';\n\nexport const NavigationBar = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  return (\n    <nav className='bg-emerald-700 shadow-lg sticky top-0 z-50'>\n      <div className='mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl'>\n        <div className='items-center justify-between h-16 flex'>\n          <div className='items-center flex'>\n            <div className='flex-shrink-0'>\n              {/* <Image\n                alt='Logo de Course Clash - Espada insertada en un birrete de graduación'\n                src='https://placehold.co/200x80/emerald/white?text=Course+Clash'\n                className='h-12 w-auto'\n                width={200}\n                height={80}\n              /> */}\n            </div>\n            <div className='md:block hidden'>\n              <div className='ml-10 items-baseline flex space-x-4'>\n                <Link\n                  href='/'\n                  className={clsx(\n                    'text-white px-3 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                    'hover:bg-emerald-600'\n                  )}\n                >\n                  <HomeIcon className='h-5 w-5' />\n                  Inicio\n                </Link>\n                <Link\n                  href='/#caracteristicas'\n                  className={clsx(\n                    'text-white px-3 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                    'hover:bg-emerald-600'\n                  )}\n                >\n                  <SparklesIcon className='h-5 w-5' />\n                  Características\n                </Link>\n                <Link\n                  href='/duelos'\n                  className={clsx(\n                    'text-white px-3 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                    'hover:bg-emerald-600'\n                  )}\n                >\n                  <TrophyIcon className='h-5 w-5' />\n                  Duelos\n                </Link>\n                {/* <Link\n                  href='/precios'\n                  className={clsx(\n                    'text-white px-3 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                    'hover:bg-emerald-600'\n                  )}\n                >\n                  <CurrencyDollarIcon className=\"h-5 w-5\" />\n                  Precios\n                </Link> */}\n              </div>\n            </div>\n          </div>\n          <div className='md:block hidden'>\n            <div className='ml-4 items-center md:ml-6 flex space-x-3'>\n              <Link\n                href='/login'\n                className={clsx(\n                  'bg-emerald-500 text-white px-4 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                  'hover:bg-emerald-400 transition-colors duration-300'\n                )}\n              >\n                <ArrowRightOnRectangleIcon className='h-5 w-5' />\n                Iniciar Sesión\n              </Link>\n              <Link\n                href='/registro'\n                className={clsx(\n                  'bg-white text-emerald-700 px-4 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                  'hover:bg-gray-100 border border-emerald-700 transition-colors duration-300'\n                )}\n              >\n                <UserPlusIcon className='h-5 w-5' />\n                Registrarse\n              </Link>\n            </div>\n          </div>\n          <div className='md:hidden -mr-2 flex'>\n            <button\n              type='button'\n              onClick={toggleMobileMenu}\n              className={clsx(\n                'inline-flex p-2 bg-emerald-600 items-center justify-center rounded-md text-white',\n                'hover:bg-emerald-500 focus:outline-none'\n              )}\n            >\n              <svg\n                className='h-6 w-6'\n                xmlns='http://www.w3.org/2000/svg'\n                fill='none'\n                viewBox='0 0 24 24'\n                stroke='currentColor'\n              >\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  strokeWidth='2'\n                  d='M4 6h16M4 12h16M4 18h16'\n                ></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      {mobileMenuOpen && (\n        <div className='md:hidden bg-emerald-700'>\n          <div className='px-2 pt-2 pb-3 sm:px-3 space-y-1'>\n            <Link\n              href='/#inicio'\n              className={clsx(\n                'text-white px-3 py-2 rounded-md text-base font-medium flex items-center gap-2',\n                'hover:bg-emerald-600'\n              )}\n            >\n              <HomeIcon className='h-5 w-5' />\n              Inicio\n            </Link>\n            <Link\n              href='/#caracteristicas'\n              className={clsx(\n                'text-white px-3 py-2 rounded-md text-base font-medium flex items-center gap-2',\n                'hover:bg-emerald-600'\n              )}\n            >\n              <SparklesIcon className='h-5 w-5' />\n              Características\n            </Link>\n            <Link\n              href='/duelos'\n              className={clsx(\n                'text-white px-3 py-2 rounded-md text-base font-medium flex items-center gap-2',\n                'hover:bg-emerald-600'\n              )}\n            >\n              <TrophyIcon className='h-5 w-5' />\n              Duelos\n            </Link>\n            <Link\n              href='/precios'\n              className={clsx(\n                'text-white px-3 py-2 rounded-md text-base font-medium flex items-center gap-2',\n                'hover:bg-emerald-600'\n              )}\n            >\n              <CurrencyDollarIcon className='h-5 w-5' />\n              Precios\n            </Link>\n          </div>\n          <div className='pt-4 pb-3 border-t border-emerald-600'>\n            <div className='items-center px-5 flex space-x-3'>\n              <Link\n                href='/login'\n                className={clsx(\n                  'bg-emerald-500 text-white px-4 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                  'w-full text-center hover:bg-emerald-400'\n                )}\n              >\n                <ArrowRightOnRectangleIcon className='h-5 w-5' />\n                Iniciar Sesión\n              </Link>\n            </div>\n            <div className='mt-3 px-5'>\n              <Link\n                href='/registro'\n                className={clsx(\n                  'bg-white text-emerald-700 px-4 py-2 rounded-md text-sm font-medium flex items-center gap-2',\n                  'w-full text-center hover:bg-gray-100 border border-emerald-700 block'\n                )}\n              >\n                <UserPlusIcon className='h-5 w-5' />\n                Registrarse\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n};\n\nexport default NavigationBar;\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;;;;;;AAcO,MAAM,gBAAgB;IAC3B,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAErD,MAAM,mBAAmB;QACvB,kBAAkB,CAAC;IACrB;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;;;;;8CASf,8OAAC;oCAAI,WAAU;8CACb,cAAA,8OAAC;wCAAI,WAAU;;0DACb,8OAAC,4JAAA,CAAA,UAAI;gDACH,MAAK;gDACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,+EACA;;kEAGF,8OAAC,+MAAA,CAAA,WAAQ;wDAAC,WAAU;;;;;;oDAAY;;;;;;;0DAGlC,8OAAC,4JAAA,CAAA,UAAI;gDACH,MAAK;gDACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,+EACA;;kEAGF,8OAAC,uNAAA,CAAA,eAAY;wDAAC,WAAU;;;;;;oDAAY;;;;;;;0DAGtC,8OAAC,4JAAA,CAAA,UAAI;gDACH,MAAK;gDACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,+EACA;;kEAGF,8OAAC,mNAAA,CAAA,aAAU;wDAAC,WAAU;;;;;;oDAAY;;;;;;;;;;;;;;;;;;;;;;;;sCAgB1C,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCAAI,WAAU;;kDACb,8OAAC,4JAAA,CAAA,UAAI;wCACH,MAAK;wCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,8FACA;;0DAGF,8OAAC,iPAAA,CAAA,4BAAyB;gDAAC,WAAU;;;;;;4CAAY;;;;;;;kDAGnD,8OAAC,4JAAA,CAAA,UAAI;wCACH,MAAK;wCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,8FACA;;0DAGF,8OAAC,uNAAA,CAAA,eAAY;gDAAC,WAAU;;;;;;4CAAY;;;;;;;;;;;;;;;;;;sCAK1C,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCACC,MAAK;gCACL,SAAS;gCACT,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,oFACA;0CAGF,cAAA,8OAAC;oCACC,WAAU;oCACV,OAAM;oCACN,MAAK;oCACL,SAAQ;oCACR,QAAO;8CAEP,cAAA,8OAAC;wCACC,eAAc;wCACd,gBAAe;wCACf,aAAY;wCACZ,GAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAOb,gCACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,4JAAA,CAAA,UAAI;gCACH,MAAK;gCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,iFACA;;kDAGF,8OAAC,+MAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;oCAAY;;;;;;;0CAGlC,8OAAC,4JAAA,CAAA,UAAI;gCACH,MAAK;gCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,iFACA;;kDAGF,8OAAC,uNAAA,CAAA,eAAY;wCAAC,WAAU;;;;;;oCAAY;;;;;;;0CAGtC,8OAAC,4JAAA,CAAA,UAAI;gCACH,MAAK;gCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,iFACA;;kDAGF,8OAAC,mNAAA,CAAA,aAAU;wCAAC,WAAU;;;;;;oCAAY;;;;;;;0CAGpC,8OAAC,4JAAA,CAAA,UAAI;gCACH,MAAK;gCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,iFACA;;kDAGF,8OAAC,mOAAA,CAAA,qBAAkB;wCAAC,WAAU;;;;;;oCAAY;;;;;;;;;;;;;kCAI9C,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,8FACA;;sDAGF,8OAAC,iPAAA,CAAA,4BAAyB;4CAAC,WAAU;;;;;;wCAAY;;;;;;;;;;;;0CAIrD,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,8FACA;;sDAGF,8OAAC,uNAAA,CAAA,eAAY;4CAAC,WAAU;;;;;;wCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASpD;uCAEe","debugId":null}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":["file:///home/juan/C%C3%B3digo/CourseClash/CourseClash/frontend/lib/graphql-client.ts"],"sourcesContent":["// Utilidad de cliente GraphQL para el frontend de CourseClash\n// Este archivo proporciona funciones para comunicarse con la API GraphQL\n// y gestionar los tokens de autenticación en el navegador.\n\n// Función para ejecutar consultas/mutaciones GraphQL\nexport async function fetchGraphQL({\n  query,\n  variables = {},\n  headers = {},\n  cache = 'no-store', // Por defecto no-store para operaciones relacionadas con autenticación\n}: {\n  query: string;\n  variables?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  cache?: RequestCache;\n}) {\n  try {\n    // Endpoint del API Gateway\n    const apiGatewayUrl =\n      process.env.NEXT_PUBLIC_API_GATEWAY_URL || 'http://localhost:8080';\n    const endpoint = `${apiGatewayUrl}/api/graphql`;\n    console.log('Endpoint:', endpoint);\n\n    // Start request timing for performance monitoring\n    const requestStartTime = performance.now();\n\n    // Get operation name for better logging\n    const operationType = query.includes('mutation') ? 'Mutation' : 'Query';\n    const operationNameMatch = query.match(/(?:mutation|query)\\s+(\\w+)/i);\n    const operationName = operationNameMatch\n      ? operationNameMatch[1]\n      : 'Unknown';\n\n    // Show detailed request info with timestamp\n    console.group(\n      `🔄 GraphQL ${operationType}: ${operationName} (${new Date().toISOString()})`\n    );\n    console.log('📡 Request to:', endpoint);\n    console.log(\n      '📝 Query:',\n      query.slice(0, 150) + (query.length > 150 ? '...' : '')\n    );\n    console.log('📦 Variables:', variables);\n    console.log('🔖 Headers:', {\n      ...headers,\n      'Content-Type': 'application/json',\n    });\n    console.groupEnd();\n\n    // delay request\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    const res = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n      }),\n      cache,\n      credentials: 'include', // Include credentials for cross-origin requests if needed\n    });\n\n    // Handle HTTP errors\n    if (!res.ok) {\n      const errorText = await res.text();\n      throw new Error(`HTTP error ${res.status}: ${errorText}`);\n    }\n\n    const json = await res.json();\n\n    // Calculate request duration\n    const requestDuration = performance.now() - requestStartTime;\n\n    // Log response information\n    console.group(\n      `📷 GraphQL Response: ${operationName} (${requestDuration.toFixed(0)}ms)`\n    );\n    if (json.errors) {\n      console.error('❌ GraphQL Errors:', json.errors);\n      console.log('⏱ Duration:', `${requestDuration.toFixed(0)}ms`);\n      console.groupEnd();\n\n      const error = json.errors[0] || {\n        message: 'Error during GraphQL request',\n      };\n      const errorMessage = error.message || 'Unknown GraphQL error';\n      throw new Error(errorMessage);\n    } else {\n      console.log('✅ Status: Success');\n      console.log('📄 Data Keys:', Object.keys(json.data || {}));\n      console.log('⏱ Duration:', `${requestDuration.toFixed(0)}ms`);\n      console.groupEnd();\n    }\n\n    return json.data;\n  } catch (error) {\n    console.error('Error fetching GraphQL:', error);\n    throw error;\n  }\n}\n\n// Almacena el token de autenticación en localStorage y cookies (solo en el cliente)\nexport const setAuthToken = (token: string) => {\n  if (typeof window !== 'undefined') {\n    // Guardar en localStorage\n    localStorage.setItem('authToken', token);\n\n    // Guardar en cookies\n    document.cookie = `auth_token=${token}; path=/; max-age=2592000; SameSite=Lax`; // 30 días\n  }\n};\n\n// Obtiene el token de autenticación desde localStorage o cookies (solo en el cliente)\nexport const getAuthToken = () => {\n  if (typeof window !== 'undefined') {\n    // Intentar obtener de localStorage primero\n    const token = localStorage.getItem('authToken');\n    if (token) return token;\n\n    // Si no está en localStorage, intentar obtener de cookies\n    const cookies = document.cookie.split(';');\n    const authCookie = cookies.find((cookie) =>\n      cookie.trim().startsWith('auth_token=')\n    );\n    if (authCookie) {\n      const token = authCookie.split('=')[1];\n      // Guardar en localStorage para futuras referencias\n      localStorage.setItem('authToken', token);\n      return token;\n    }\n  }\n  return null;\n};\n\n// Elimina el token de autenticación de localStorage y cookies (solo en el cliente)\nexport const clearAuthToken = () => {\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('authToken');\n    document.cookie =\n      'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n  }\n};\n\n// Añade el token de autenticación a las cabeceras si está disponible\nexport const getAuthHeaders = (): Record<string, string> => {\n  const token = getAuthToken();\n  if (token) {\n    return { Authorization: `Bearer ${token}` };\n  }\n  return {};\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["file:///home/juan/C%C3%B3digo/CourseClash/CourseClash/frontend/lib/auth-hooks.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { fetchGraphQL, getAuthHeaders } from './graphql-client';\n\nexport type User = {\n  id: string;\n  username: string;\n  email: string;\n  fullName?: string;\n  avatar?: string;\n  role: 'STUDENT' | 'TEACHER' | 'ADMIN';\n  createdAt: string;\n  updatedAt?: string;\n};\n\nexport class AuthError extends Error {\n  public isServerError: boolean;\n\n  constructor(\n    message: string,\n    public code: AuthErrorCode = 'UNKNOWN_ERROR',\n    isServerError?: boolean\n  ) {\n    super(message);\n    this.name = 'AuthError';\n    Object.setPrototypeOf(this, AuthError.prototype);\n    this.isServerError = isServerError ?? false;\n  }\n}\n\nexport type AuthErrorCode =\n  | 'UNKNOWN_ERROR'\n  | 'USER_NOT_FOUND'\n  | 'INVALID_CREDENTIALS'\n  | 'SERVER_ERROR'\n  | 'INVALID_CODE'\n  | 'EMAIL_EXISTS'\n  | 'INVALID_TOKEN'\n  | 'TOKEN_EXPIRED';\n\nexport type AuthResponse = {\n  code: string;\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresAt?: string;\n  __typename?: string;\n};\n\nexport type PasswordResetResponse = {\n  message: string;\n  code: string;\n  token: string;\n  __typename: 'ForgotPasswordSuccess' | 'ForgotPasswordError';\n};\n\nexport type AuthContextType = {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<AuthResponse>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<PasswordResetResponse>;\n  updatePassword: (\n    newPassword: string,\n    code: string\n  ) => Promise<PasswordResetResponse>;\n};\n\nexport type LoginResult = AuthResponse | AuthError;\n\nexport type UpdatePasswordResponse = {\n  message: string;\n  __typename: 'UpdatePasswordSuccess' | 'UpdatePasswordError';\n};\n\nexport function useLogin() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const login = useCallback(async (email: string, password: string) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const loginMutation = `\n        mutation Login($email: String!, $password: String!) {\n          login(email: $email, password: $password) {\n            __typename\n            ... on AuthSuccess {\n              user {\n                id\n                username\n                email\n                fullName  \n                avatar\n                role\n                createdAt\n                updatedAt\n              }\n              token\n              refreshToken\n              expiresAt\n            }\n            ... on AuthError {\n              message\n              code\n            }\n          }\n        }\n      `;\n\n      console.log('📤 Sending login request to API Gateway');\n      const data = await fetchGraphQL({\n        query: loginMutation,\n        variables: { email, password },\n      });\n      console.log('🔑 Login response:', data);\n\n      console.log('📥 Received login response:', {\n        type: data.login.__typename,\n        success: data.login.__typename === 'AuthSuccess',\n        timestamp: new Date().toISOString(),\n      });\n\n      if (data.login.__typename === 'AuthError') {\n        throw new AuthError(\n          data.login.message || 'Error de autenticación',\n          data.login.code as AuthErrorCode,\n          true\n        );\n      }\n\n      const authResponse = data.login as AuthResponse;\n      console.log('🔑 Auth token', data.login);\n\n      // Set the token in an HTTP-only cookie\n      document.cookie = `auth_token=${authResponse.token}; path=/; secure; samesite=strict`;\n\n      // If you have a refresh token, set it in a separate cookie\n      if (authResponse.refreshToken) {\n        document.cookie = `refresh_token=${authResponse.refreshToken}; path=/; secure; samesite=strict`;\n      }\n\n      console.log('🔑 Auth token stored in cookies');\n      setLoading(false);\n      return authResponse;\n    } catch (err: unknown) {\n      console.error('❌ Login error:', err);\n      setLoading(false);\n\n      if (err instanceof AuthError) {\n        setError(err.message);\n        throw err;\n      }\n\n      const error = new AuthError(\n        err instanceof Error ? err.message : 'Error de autenticación',\n        'UNKNOWN_ERROR',\n        true\n      );\n      setError(error.message);\n      throw error;\n    }\n  }, []);\n\n  return { login, loading, error };\n}\n\nexport function useRegister() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const register = useCallback(\n    async (userData: {\n      username: string;\n      email: string;\n      password: string;\n      fullName?: string;\n      role?: 'STUDENT' | 'TEACHER' | 'ADMIN';\n    }) => {\n      setLoading(true);\n      setError(null);\n\n      console.log('📝 Register attempt:', {\n        username: userData.username,\n        email: userData.email,\n        fullName: userData.fullName,\n        role: userData.role,\n        timestamp: new Date().toISOString(),\n      });\n\n      try {\n        const registerMutation = `\n          mutation Register(\n            $username: String!\n            $email: String!\n            $password: String!\n            $fullName: String\n            $role: UserRole\n          ) {\n            register(\n              username: $username\n              email: $email\n              password: $password\n              fullName: $fullName\n              role: $role\n            ) {\n              __typename\n              ... on AuthSuccess {\n                user {\n                  id\n                  username\n                  email\n                  fullName\n                  avatar\n                  role\n                  createdAt\n                  updatedAt\n                }\n                token\n                refreshToken\n                expiresAt\n              }\n              ... on AuthError {\n                message\n                code\n              }\n            }\n          }\n        `;\n\n        console.log('📤 Sending register request to API Gateway');\n        const data = await fetchGraphQL({\n          query: registerMutation,\n          variables: userData,\n        });\n\n        console.log('📥 Received register response:', {\n          type: data.register.__typename,\n          success: data.register.__typename === 'AuthSuccess',\n          timestamp: new Date().toISOString(),\n        });\n\n        if (data.register.__typename === 'AuthError') {\n          console.log('📥 AuthError received:', {\n            message: data.register.message,\n            code: data.register.code,\n            type: data.register.__typename,\n          });\n\n          const errorMessage =\n            typeof data.register.message === 'string'\n              ? data.register.message\n              : JSON.stringify(data.register.message);\n\n          throw new AuthError(\n            errorMessage,\n            data.register.code as AuthErrorCode,\n            true\n          );\n        }\n\n        const authResponse = data.register as AuthResponse;\n\n        // Store the token in an HTTP-only cookie\n        document.cookie = `auth_token=${authResponse.token}; path=/; secure; samesite=strict`;\n\n        // If you have a refresh token, set it in a separate cookie\n        if (authResponse.refreshToken) {\n          document.cookie = `refresh_token=${authResponse.refreshToken}; path=/; secure; samesite=strict`;\n        }\n\n        console.log('🔑 Auth token stored in cookies for new user');\n\n        setLoading(false);\n        return authResponse;\n      } catch (err: unknown) {\n        console.error('Registration error:', err);\n        setLoading(false);\n\n        if (err instanceof AuthError) {\n          setError(err.message);\n          throw err;\n        }\n\n        const error = new AuthError(\n          err instanceof Error ? err.message : 'Error al registrar el usuario',\n          'UNKNOWN_ERROR',\n          true\n        );\n        setError(error.message);\n        throw error;\n      }\n    },\n    []\n  );\n\n  return { register, loading, error };\n}\n\nexport function useLogout() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const logout = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    console.log('🚪 Logout attempt:', { timestamp: new Date().toISOString() });\n\n    try {\n      const logoutMutation = `\n          mutation Logout {\n            logout\n          }\n        `;\n\n      console.log('📤 Sending logout request to API Gateway');\n      await fetchGraphQL({\n        query: logoutMutation,\n        headers: getAuthHeaders(),\n      });\n      console.log('📥 Received logout response');\n\n      // Clear the cookies\n      document.cookie =\n        'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; secure; samesite=strict';\n      document.cookie =\n        'refresh_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; secure; samesite=strict';\n\n      console.log('🔓 Auth tokens cleared from cookies');\n      setLoading(false);\n      return true;\n    } catch (err: unknown) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Failed to logout';\n      console.error('❌ Logout error:', errorMessage);\n      setError(errorMessage);\n      setLoading(false);\n      // Even if the API call fails, we clear the cookies\n      document.cookie =\n        'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; secure; samesite=strict';\n      document.cookie =\n        'refresh_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; secure; samesite=strict';\n      console.log('🔓 Auth tokens cleared from cookies (after error)');\n      return false;\n    }\n  }, []);\n\n  return { logout, loading, error };\n}\n\nexport function useCurrentUser() {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchCurrentUser = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    console.log('👤 Fetching current user session');\n    const headers = getAuthHeaders();\n    console.log('🔑 Headers being sent:', headers);\n\n    try {\n      const meQuery = `\n          query Me {\n            me {\n              id\n              username\n              email\n              fullName\n              avatar\n              role\n              createdAt\n              updatedAt\n            }\n          }\n        `;\n\n      console.log('📤 Sending user session request to API Gateway');\n      const data = await fetchGraphQL({\n        query: meQuery,\n        headers: headers,\n      });\n\n      console.log('📥 Raw response:', data);\n      console.log('me data', data);\n      console.log('Auth headers:', headers);\n\n      if (data.me) {\n        console.log('�� User session found:', {\n          id: data.me.id,\n          username: data.me.username,\n          fullName: data.me.fullName,\n          role: data.me.role,\n          timestamp: new Date().toISOString(),\n        });\n        setUser(data.me as User);\n      } else {\n        console.log('📥 No active user session found');\n        setUser(null);\n      }\n\n      setLoading(false);\n      return data.me as User;\n    } catch (err: unknown) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Failed to fetch current user';\n      console.error('❌ User session error:', errorMessage);\n      setError(errorMessage);\n      setLoading(false);\n      setUser(null);\n      return null;\n    }\n  }, []);\n\n  // Fetch user on mount\n  useEffect(() => {\n    fetchCurrentUser();\n  }, [fetchCurrentUser]);\n\n  return { user, loading, error, fetchCurrentUser };\n}\n\nexport function useForgotPassword() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const requestPasswordReset = useCallback(async (email: string) => {\n    setLoading(true);\n    setError(null);\n\n    console.log('🔑 Password reset request:', {\n      email,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const forgotPasswordMutation = `\n          mutation ForgotPassword($email: String!) {\n            forgotPassword(email: $email) {\n              __typename\n              ... on ForgotPasswordSuccess {\n                message\n                code\n                token\n              }\n              ... on ForgotPasswordError {\n                message\n                code\n              }\n            }\n          }\n        `;\n\n      console.log('📤 Sending password reset request to API Gateway');\n      const data = await fetchGraphQL({\n        query: forgotPasswordMutation,\n        variables: { email },\n      });\n\n      console.log('📥 Received password reset response:', {\n        type: data.forgotPassword.__typename,\n        success: data.forgotPassword.__typename === 'ForgotPasswordSuccess',\n        timestamp: new Date().toISOString(),\n      });\n\n      if (data.forgotPassword.__typename === 'ForgotPasswordError') {\n        console.log('Error details:', {\n          code: data.forgotPassword.code,\n          message: data.forgotPassword.message,\n        });\n\n        // Map error codes to specific error types\n        switch (data.forgotPassword.code) {\n          case 'USER_NOT_FOUND':\n            throw new AuthError('Email not registered', 'USER_NOT_FOUND');\n          case 'SERVER_ERROR':\n            throw new AuthError(\n              data.forgotPassword.message || 'Error del servidor',\n              'SERVER_ERROR',\n              true\n            );\n          default:\n            throw new AuthError(\n              data.forgotPassword.message || 'Error al procesar la solicitud',\n              data.forgotPassword.code,\n              true\n            );\n        }\n      }\n\n      console.log('data recieved', data.forgotPassword);\n      setLoading(false);\n      return data.forgotPassword as PasswordResetResponse;\n    } catch (err: unknown) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Failed to request password reset';\n      console.error('❌ Password reset request error:', errorMessage);\n      setError(errorMessage);\n      setLoading(false);\n\n      // Re-throw the error with proper typing\n      if (err instanceof AuthError) {\n        throw err;\n      }\n      throw new AuthError(errorMessage, 'SERVER_ERROR', true);\n    }\n  }, []);\n\n  const updatePassword = useCallback(\n    async (newPassword: string, code: string, email: string, token: string) => {\n      setLoading(true);\n      setError(null);\n\n      console.log('🔑 Updating password:', {\n        email,\n        code,\n        token: token.substring(0, 10) + '...', // Log only part of token for security\n        timestamp: new Date().toISOString(),\n      });\n\n      try {\n        const updatePasswordMutation = `\n          mutation UpdatePassword($newPassword: String!, $code: String!, $email: String!) {\n            updatePassword(newPassword: $newPassword, code: $code, email: $email) {\n              __typename\n              ... on UpdatePasswordSuccess {\n                message\n              }\n              ... on UpdatePasswordError {\n                message\n                code\n              }\n            }\n          }\n        `;\n\n        console.log('📤 Sending password update request to API Gateway');\n        const data = await fetchGraphQL({\n          query: updatePasswordMutation,\n          variables: { newPassword, code, email },\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        console.log('📥 Received password update response:', {\n          type: data.updatePassword.__typename,\n          success: data.updatePassword.__typename === 'UpdatePasswordSuccess',\n          message: data.updatePassword.message,\n          code: data.updatePassword.code,\n          timestamp: new Date().toISOString(),\n        });\n\n        if (data.updatePassword.__typename === 'UpdatePasswordError') {\n          console.log('Error details:', {\n            code: data.updatePassword.code,\n            message: data.updatePassword.message,\n          });\n\n          throw new AuthError(\n            data.updatePassword.message || 'Error al actualizar la contraseña',\n            data.updatePassword.code,\n            true\n          );\n        }\n\n        setLoading(false);\n        return data.updatePassword as UpdatePasswordResponse;\n      } catch (err: unknown) {\n        const errorMessage =\n          err instanceof Error ? err.message : 'Failed to update password';\n        console.error('❌ Password update error:', {\n          message: errorMessage,\n          error: err,\n          timestamp: new Date().toISOString(),\n        });\n        setError(errorMessage);\n        setLoading(false);\n\n        // Re-throw the error with proper typing\n        if (err instanceof AuthError) {\n          throw err;\n        }\n        throw new AuthError(errorMessage, 'SERVER_ERROR', true);\n      }\n    },\n    []\n  );\n\n  return { requestPasswordReset, updatePassword, loading, error };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 997, "column": 0}, "map": {"version":3,"sources":["file:///home/juan/C%C3%B3digo/CourseClash/CourseClash/frontend/lib/auth-context.tsx"],"sourcesContent":["'use client';\n\n// Contexto de autenticación para CourseClash\n// Este archivo proporciona un contexto global para gestionar el estado de autenticación\n// en toda la aplicación, permitiendo a los componentes acceder fácilmente al usuario actual\n// y a las funciones de autenticación.\n\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n  ReactNode,\n} from 'react';\nimport {\n  User,\n  AuthResponse,\n  useCurrentUser,\n  useLogin,\n  useLogout,\n  useRegister,\n  useForgotPassword,\n  PasswordResetResponse,\n  UpdatePasswordResponse,\n  AuthError,\n} from './auth-hooks';\nimport { getAuthToken } from './graphql-client';\n\n// Tipo que define la estructura del contexto de autenticación\ntype AuthContextType = {\n  user: User | null; // Usuario actual o null si no está autenticado\n  isLoading: boolean; // Indica si hay operaciones de autenticación en curso\n  isAuthenticated: boolean; // Indica si el usuario está autenticado\n  login: (email: string, password: string) => Promise<AuthResponse>; // Función para iniciar sesión\n  register: (userData: {\n    // Función para registrar un nuevo usuario\n    username: string;\n    email: string;\n    password: string;\n    name?: string;\n    role?: 'STUDENT' | 'TEACHER' | 'ADMIN';\n  }) => Promise<AuthResponse>;\n  resetPassword: (email: string) => Promise<PasswordResetResponse>;\n  updatePassword: (\n    newPassword: string,\n    code: string,\n    email: string,\n    token: string\n  ) => Promise<UpdatePasswordResponse>;\n  logout: () => Promise<boolean>; // Función para cerrar sesión\n};\n\n// Creación del contexto de autenticación con valor inicial undefined\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Proveedor del contexto de autenticación que envuelve la aplicación\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const { user, loading: userLoading, fetchCurrentUser } = useCurrentUser();\n  const { login, loading: loginLoading } = useLogin();\n  const { requestPasswordReset, updatePassword } = useForgotPassword();\n  const { register, loading: registerLoading } = useRegister();\n  const { logout } = useLogout();\n\n  const isLoading = userLoading || loginLoading || registerLoading;\n\n  // Define all handler functions with useCallback before useEffect hooks\n  // Envuelve la función de login para obtener automáticamente el usuario después del inicio de sesión\n  const handleLogin = useCallback(\n    async (email: string, password: string) => {\n      const result = await login(email, password);\n      await fetchCurrentUser();\n      return result;\n    },\n    [login, fetchCurrentUser]\n  );\n\n  // Envuelve la función de registro para obtener automáticamente el usuario después del registro\n  const handleRegister = useCallback(\n    async (userData: {\n      username: string;\n      email: string;\n      password: string;\n      name?: string;\n      role?: 'STUDENT' | 'TEACHER' | 'ADMIN';\n    }) => {\n      try {\n        const result = await register(userData);\n        await fetchCurrentUser();\n        return result;\n      } catch (error) {\n        console.error('Auth context register error:', {\n          error,\n          isAuthError: error instanceof AuthError,\n          errorType: error?.constructor?.name,\n          errorMessage:\n            error instanceof Error ? error.message : 'Unknown error',\n        });\n\n        // Si ya es un AuthError, lo re-lanzamos\n        if (error instanceof AuthError) {\n          throw error;\n        }\n\n        // Si no es un AuthError, lo transformamos\n        const errorMessage =\n          error instanceof Error\n            ? error.message\n            : typeof error === 'string'\n            ? error\n            : JSON.stringify(error);\n\n        throw new AuthError(errorMessage, 'UNKNOWN_ERROR', true);\n      }\n    },\n    [register, fetchCurrentUser]\n  );\n\n  // Envuelve la función de cierre de sesión para limpiar el estado del usuario\n  const handleLogout = useCallback(async () => {\n    const result = await logout();\n    setIsAuthenticated(false);\n    return result;\n  }, [logout, setIsAuthenticated]);\n\n  useEffect(() => {\n    // Check if there's a token in localStorage\n    const token = getAuthToken();\n\n    if (token) {\n      // If token exists, fetch the current user\n      fetchCurrentUser().then((userData) => {\n        setIsAuthenticated(!!userData);\n      });\n    } else {\n      setIsAuthenticated(false);\n    }\n  }, [fetchCurrentUser]);\n\n  const handleResetPassword = useCallback(\n    async (email: string) => {\n      try {\n        const result = await requestPasswordReset(email);\n        return result;\n      } catch (error) {\n        console.error('Error requesting password reset:', error);\n        throw error;\n      }\n    },\n    [requestPasswordReset]\n  );\n\n  const handleUpdatePassword = useCallback(\n    async (newPassword: string, code: string, email: string, token: string) => {\n      try {\n        const result = await updatePassword(newPassword, code, email, token);\n        return result;\n      } catch (error) {\n        console.error('Error updating password:', error);\n        throw error;\n      }\n    },\n    [updatePassword]\n  );\n\n  // Actualiza el estado de autenticación cuando cambia el usuario\n  useEffect(() => {\n    setIsAuthenticated(!!user);\n  }, [user]);\n\n  // Set up a timer to refresh the token before it expires\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    // Set a timer to refresh the token 5 minutes before it expires\n    const tokenRefreshInterval = setInterval(async () => {\n      try {\n        // This would call your refresh token mutation\n        // For now, we'll just re-fetch the current user to verify the session\n        await fetchCurrentUser();\n      } catch (error) {\n        console.error('Error refreshing token:', error);\n        // If refreshing fails, log the user out\n        handleLogout();\n      }\n    }, 25 * 60 * 1000); // Every 25 minutes (assuming tokens expire after 30 minutes)\n\n    return () => clearInterval(tokenRefreshInterval);\n  }, [isAuthenticated, fetchCurrentUser, handleLogout]);\n\n  const value = {\n    user,\n    isLoading,\n    isAuthenticated,\n    login: handleLogin,\n    register: handleRegister,\n    logout: handleLogout,\n    resetPassword: handleResetPassword,\n    updatePassword: handleUpdatePassword,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n// Hook personalizado para acceder al contexto de autenticación desde cualquier componente\nexport function useAuth() {\n  const context = useContext(AuthContext);\n\n  // Verifica que el hook se esté utilizando dentro de un AuthProvider\n  if (context === undefined) {\n    throw new Error('useAuth debe ser utilizado dentro de un AuthProvider');\n  }\n\n  return context;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}