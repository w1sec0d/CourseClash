events {
  worker_connections 1024;
}

http {
  # =================================================================
  # CONFIGURACIÓN DE RATE LIMITING Y THROTTLING
  # =================================================================
  
  # Zona para rate limiting general (20 req/seg por IP)
  # - Ventana de tiempo: 1 minuto
  # - Memoria asignada: 10MB (aprox. 160,000 IPs)
  limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
  
  # Zona para API Gateway (60 req/seg por IP)
  # - Límite alto para APIs con alta demanda
  # - Permite manejo eficiente de aplicaciones modernas
  
  #NORMAL
  limit_req_zone $binary_remote_addr zone=api:10m rate=2000r/s;
  #?TESTS
  #limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;


  # =================================================================
  # CONFIGURACIÓN DE LOGS PARA AUDITORÍA
  # =================================================================
  
  # Formato de log personalizado para auditoría de rate limiting
  log_format rate_limit_log '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'rate_limit_status="$limit_req_status" '
                           'rate_limit_delay="$upstream_response_time"';
  
  # Log específico para eventos de rate limiting
  access_log /var/log/nginx/rate_limit.log rate_limit_log;

  # =================================================================
  # CONFIGURACIÓN SSL/TLS PARA CANAL SEGURO
  # =================================================================
  
  # Configuración SSL moderna y segura
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305';
  ssl_prefer_server_ciphers off;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  ssl_session_tickets off;
  ssl_dhparam /etc/nginx/ssl/dhparam.pem;
  ssl_stapling on;
  ssl_stapling_verify on;
  
  # Headers de seguridad mínimos para Canal Seguro
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;

  # =================================================================
  # UPSTREAMS (TRABAJO ORIGINAL CONSERVADO)
  # =================================================================
  
  upstream frontend_web {
    server cc_fe_web:3000;
    keepalive 32;
  }

  upstream api_gateway {
    server https://courseclash-loadbalancer-433766410684.us-central1.run.app:8080;
    keepalive 32;
  }

  # =================================================================
  # SERVIDOR HTTP - REDIRECT A HTTPS 
  # =================================================================
  
  server {
    listen 80;
    server_name localhost courseclash.local *.courseclash.local;
    
    # Redirect permanente a HTTPS para Canal Seguro
    location / {
      return 301 https://$host$request_uri;
    }
    
    access_log /var/log/nginx/http_redirects.log;
  }

  # =================================================================
  # SERVIDOR HTTPS - CONSERVANDO LÓGICA ORIGINAL + CANAL SEGURO
  # =================================================================
  
  server {
    listen 443 ssl http2;
    server_name localhost courseclash.local *.courseclash.local;
    
    # Certificados SSL para Canal Seguro
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    # =============================================================
    # API GATEWAY CON RATE LIMITING ORIGINAL CONSERVADO
    # =============================================================
    location /api {
      # RATE LIMITING PRINCIPAL PARA API
      # - Límite: 60 req/seg por IP
      # - Burst: Permite hasta 15 peticiones extra (25% del rate)
      # - Delay: Las primeras 10 peticiones extra se retrasan (THROTTLING)
      # - Las últimas 5 peticiones extra se rechazan (RATE LIMITING)
      #NORMAL
      #limit_req zone=api burst=15 delay=10;
      limit_req zone=api burst=100 delay=50;
      #?TESTS
      #limit_req zone=api burst=5 delay=3;

      # - Retorna 429 "Too Many Requests" 
      limit_req_status 429;
      
      # - Registra todas las peticiones a la API para seguimiento
      access_log /var/log/nginx/api_requests.log rate_limit_log;
      
      # Headers de seguridad mínimos para Canal Seguro
      add_header X-API-Security "TLS-Encrypted" always;
      add_header X-Channel-Type "Secure-API" always;
      
      proxy_pass http://api_gateway;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;  # HTTPS para Canal Seguro
      proxy_set_header X-Forwarded-Port $server_port;
      
      # Configuración de timeout para API
      proxy_connect_timeout 5s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
    }

    # =============================================================
    # WEBSOCKETS CON RATE LIMITING
    # =============================================================
    location /ws/ {
      # RATE LIMITING PARA WEBSOCKETS
      # - Límite: 20 req/seg por IP (igual que zona general)
      # - Burst: Permite hasta 10 conexiones/mensajes extra
      # - Delay: Throttling suave para no romper la experiencia en tiempo real
      # - Las primeras 6 peticiones extra se retrasan, las otras 4 se rechazan
      limit_req zone=general burst=10 delay=6;
      
      limit_req_status 429;
      
      # - Seguimiento específico de conexiones WebSocket
      access_log /var/log/nginx/websocket_requests.log rate_limit_log;
      
      # Headers de seguridad para WebSocket Secure
      add_header X-WebSocket-Security "TLS-Encrypted" always;
      
      proxy_pass http://cc_websocket_manager:8004/ws/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;  # WSS para Canal Seguro
      proxy_cache_bypass $http_upgrade;
      
      # Configuración específica para WebSocket seguro
      proxy_connect_timeout 5s;
      proxy_send_timeout 3600s;
      proxy_read_timeout 3600s;
    }

    # =============================================================
    # FRONTEND CON RATE LIMITING ORIGINAL CONSERVADO
    # =============================================================
    location / {
      # RATE LIMITING GENERAL PARA FRONTEND (TRABAJO ORIGINAL)
      # - Límite: 20 req/seg por IP (zona general)
      # - Burst: Permite hasta 16 peticiones extra para carga de recursos
      # - Delay: Las primeras 12 peticiones extra se retrasan suavemente
      # - Las últimas 4 peticiones extra se rechazan
      limit_req zone=general burst=16 delay=12;
      
      limit_req_status 429;

      # - Seguimiento de acceso al frontend web
      access_log /var/log/nginx/frontend_requests.log rate_limit_log;
      
      # Headers de seguridad mínimos para Canal Seguro
      add_header X-Served-By "CourseClash-Secure-Proxy" always;
      add_header X-Channel-Security "TLS-Encrypted" always;
      
      proxy_pass http://frontend_web/;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;  # HTTPS para Canal Seguro
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      
      # Cache para contenido estático
      proxy_cache_valid 200 302 10m;
      proxy_cache_valid 404 1m;
    }

    # =============================================================
    # HEALTH CHECK ENDPOINT (ADICIÓN PARA VERIFICACIÓN)
    # =============================================================
    location /health {
      add_header Content-Type application/json always;
      add_header X-Health-Check "secure" always;
      return 200 '{"status":"healthy","security":"tls-enabled","rate_limiting":"active","timestamp":"$time_iso8601"}';
    }
  }
} 