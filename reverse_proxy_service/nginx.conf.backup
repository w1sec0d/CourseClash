events {
  worker_connections 1024;
}

http {
  # =========================================================================
  # CONFIGURACIÓN DE SEGURIDAD SSL/TLS - CANAL SEGURO
  # =========================================================================
  
  # Configuración SSL moderna y segura
  ssl_protocols TLSv1.2 TLSv1.3;  # Solo protocolos seguros
  ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305';
  ssl_prefer_server_ciphers off;   # Permitir que el cliente elija el cipher
  ssl_session_cache shared:SSL:10m; # Cache de sesiones SSL
  ssl_session_timeout 10m;         # Timeout de sesiones SSL
  ssl_session_tickets off;         # Deshabilitar tickets SSL por seguridad
  
  # Parámetros Diffie-Hellman para Perfect Forward Secrecy
  ssl_dhparam /etc/nginx/ssl/dhparam.pem;
  
  # OCSP Stapling para mejor rendimiento SSL
  ssl_stapling on;
  ssl_stapling_verify on;
  
  # Headers de seguridad adicionales
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'" always;

  # =========================================================================
  # RATE LIMITING Y THROTTLING
  # =========================================================================
  
  # Zona para rate limiting general (20 req/seg por IP)
  # - Ventana de tiempo: 1 minuto
  # - Memoria asignada: 10MB (aprox. 160,000 IPs)
  limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
  
  # Zona para API Gateway (60 req/seg por IP)
  # - Límite alto para APIs con alta demanda
  # - Permite manejo eficiente de aplicaciones modernas
  
  #NORMAL
  limit_req_zone $binary_remote_addr zone=api:10m rate=60r/s;
  #?TESTS
  #limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;

  # =========================================================================
  # LOGGING PARA AUDITORÍA DE CANAL SEGURO
  # =========================================================================
  
  log_format secure_channel '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'ssl_protocol="$ssl_protocol" '
                           'ssl_cipher="$ssl_cipher" '
                           'ssl_session_reused="$ssl_session_reused" '
                           'rate_limit_status="$limit_req_status" '
                           'upstream_addr="$upstream_addr" '
                           'request_time="$request_time"'
                           'rate_limit_delay="$upstream_response_time"';
  
  access_log /var/log/nginx/secure_channel.log secure_channel;

  # =========================================================================
  # UPSTREAMS PARA LOAD BALANCING
  # =========================================================================
  
  upstream frontend_web {
    server cc_fe_web:3000;
    keepalive 32;
  }

  upstream api_gateway {
    server cc_ag:8080;
    keepalive 32;
  }

  # =========================================================================
  # SERVIDOR HTTP (REDIRECT A HTTPS)
  # =========================================================================
  
  server {
    listen 80;
    server_name localhost courseclash.local *.courseclash.local;
    
    # Redirect permanente a HTTPS (implementación de Canal Seguro)
    location / {
      return 301 https://$host$request_uri;
    }
    
    # Logs de redirects
    access_log /var/log/nginx/http_redirects.log;
  }

  # =========================================================================
  # SERVIDOR HTTPS - CANAL SEGURO PRINCIPAL
  # =========================================================================
  
  server {
    listen 443 ssl http2;  # HTTP/2 para mejor rendimiento
    server_name localhost courseclash.local *.courseclash.local;
    
    # =========================================================================
    # CONFIGURACIÓN SSL - CERTIFICADOS Y CLAVES
    # =========================================================================
    
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    
    # =========================================================================
    # FRONTEND LOAD BALANCING (CANAL SEGURO)
    # =========================================================================
    
    location / {
      # Rate limiting para frontend
      limit_req zone=general burst=16 delay=12;
      limit_req_status 429;

      # Headers de seguridad específicos para frontend
      add_header X-Served-By "CourseClash-Secure-Proxy" always;
      add_header X-Channel-Security "TLS-Encrypted" always;
      
      proxy_pass http://frontend_web;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;  # HTTPS
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_set_header X-SSL-Protocol $ssl_protocol;
      proxy_set_header X-SSL-Cipher $ssl_cipher;
      
      # Cache para contenido estático
      proxy_cache_valid 200 302 10m;
      proxy_cache_valid 404 1m;
      
      # Logs específicos para frontend seguro
      access_log /var/log/nginx/frontend_secure.log secure_channel;
    }

    # =========================================================================
    # API GATEWAY LOAD BALANCING (CANAL SEGURO)
    # =========================================================================
    
    location /api {
      # RATE LIMITING PRINCIPAL PARA API
      # - Límite: 60 req/seg por IP
      # - Burst: Permite hasta 15 peticiones extra (25% del rate)
      # - Delay: Las primeras 10 peticiones extra se retrasan (THROTTLING)
      # - Las últimas 5 peticiones extra se rechazan (RATE LIMITING)
      #NORMAL
      limit_req zone=api burst=15 delay=10;
      limit_req_status 429;
      
      # Headers de seguridad para API
      add_header X-API-Security "TLS-Encrypted" always;
      add_header X-Channel-Type "Secure-API" always;
      
      # Configuración para evitar redirects 307
      proxy_pass http://api_gateway;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;  # HTTPS
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
      proxy_set_header X-SSL-Protocol $ssl_protocol;
      
      # Sin cache para API calls
      proxy_no_cache 1;
      proxy_cache_bypass 1;
      
      # Configuración de timeout para API
      proxy_connect_timeout 5s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
      
      # Logs específicos para API segura
      access_log /var/log/nginx/api_secure.log secure_channel;
    }

    # =========================================================================
    # WEBSOCKET SECURE CONNECTIONS
    # =========================================================================
    
    location /ws/ {
      # Rate limiting para WebSocket
      limit_req zone=general burst=10 delay=6;
      limit_req_status 429;
      
      # Headers de seguridad para WebSocket
      add_header X-WebSocket-Security "TLS-Encrypted" always;
      
      proxy_pass http://cc_websocket_manager:8004/ws/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;  # WSS (WebSocket Secure)
      proxy_set_header X-SSL-Protocol $ssl_protocol;
      proxy_cache_bypass $http_upgrade;
      
      # Configuración específica para WebSocket seguro
      proxy_connect_timeout 5s;
      proxy_send_timeout 3600s;
      proxy_read_timeout 3600s;
      
      # Logs específicos para WebSocket seguro
      access_log /var/log/nginx/websocket_secure.log secure_channel;
    }
    
    # =========================================================================
    # HEALTH CHECK ENDPOINT
    # =========================================================================
    
    location /health {
      add_header Content-Type application/json always;
      add_header X-Health-Check "secure" always;
      return 200 '{"status":"healthy","security":"tls-enabled","timestamp":"$time_iso8601"}';
    }
  }
}
